// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// NextAuth Models
model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  accounts      Account[]
  sessions      Session[]
  person        Person?   // Relation to Person model

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

// Your Application Models
model Company {
  id                String             @id @default(cuid())
  name              String
  industry          Industry
  size              CompanySize
  location          Json               // { city: string, state: string, country: string }
  revenue           RevenueRange?
  website           String?
  description       String?
  status            Status            @default(active)
  socialLinks       Json?             // { linkedin?: string, twitter?: string, facebook?: string }
  metrics           Json              // { employeeCount: number, yearFounded: number, annualRevenue?: string, fundingTotal?: string }
  verificationStatus VerificationStatus @default(unverified)
  employees         Person[]
  tags              String[]          @default([])
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt

  @@index([name])
  @@index([industry])
  @@index([size])
  @@map("companies")
}

model Person {
  id            String      @id @default(cuid())
  firstName     String
  lastName      String
  title         String
  jobLevel      JobLevel
  email         String?     @unique
  emailStatus   EmailStatus @default(unverified)
  bio           String?
  imageUrl      String?
  company       Company     @relation(fields: [companyId], references: [id])
  companyId     String
  location      Json        // { city: string, state: string, country: string }
  contactInfo   Json        @default("{}") // { email?: string, phone?: string, direct?: string }
  socialLinks   Json        @default("{}") // { linkedin?: string, twitter?: string }
  skills        String[]    @default([])
  interests     String[]    @default([])
  lastActive    DateTime?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  user          User?       @relation(fields: [userId], references: [id])
  userId        String?     @unique // One-to-one relation with User

  @@index([firstName, lastName])
  @@index([email])
  @@index([jobLevel])
  @@map("people")
}

// Enums
enum Industry {
  Technology
  Healthcare
  Finance
  Manufacturing
  Retail
  Education
  Other
}

enum CompanySize {
  SIZE_1_10      @map("1-10")
  SIZE_11_50     @map("11-50")
  SIZE_51_200    @map("51-200")
  SIZE_201_1000  @map("201-1000")
  SIZE_1001_5000 @map("1001-5000")
  SIZE_5000_PLUS @map("5000+")
}

enum RevenueRange {
  LESS_THAN_1M    @map("Less than $1M")
  FROM_1M_10M     @map("$1M-$10M")
  FROM_10M_50M    @map("$10M-$50M")
  FROM_50M_100M   @map("$50M-$100M")
  FROM_100M_500M  @map("$100M-$500M")
  FROM_500M_1B    @map("$500M-$1B")
  MORE_THAN_1B    @map("$1B+")
  UNKNOWN         @map("Unknown")
}

enum EmailStatus {
  verified
  unverified
  invalid
}

enum JobLevel {
  C_LEVEL       @map("C-Level")
  VP            @map("VP")
  DIRECTOR      @map("Director")
  MANAGER       @map("Manager")
  SENIOR        @map("Senior")
  MID_LEVEL     @map("Mid-Level")
  ENTRY_LEVEL   @map("Entry-Level")
}

enum Status {
  active
  inactive
}

enum VerificationStatus {
  verified
  unverified
}